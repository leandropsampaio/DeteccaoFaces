/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Deteccao;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;
import static org.opencv.imgproc.Imgproc.COLOR_BGR2GRAY;
import org.opencv.objdetect.CascadeClassifier;
import org.opencv.videoio.VideoCapture;

/**
 *
 * @author Leandro Pereira Sampaio
 */
public class Webcam extends javax.swing.JFrame {

    /**
     * Creates new form NovoJFrame
     */
    public Webcam() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout painelLayout = new javax.swing.GroupLayout(painel);
        painel.setLayout(painelLayout);
        painelLayout.setHorizontalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 656, Short.MAX_VALUE)
        );
        painelLayout.setVerticalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 446, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        Webcam janela = new Webcam();
        janela.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        janela.setSize(700, 500);
        janela.setVisible(true);
        janela.mostrarWebcam();
    }

    public void mostrarWebcam() {
        Graphics g = painel.getGraphics();
        Mat video = new Mat();
        VideoCapture captura = new VideoCapture(0);
        if (captura.isOpened()) {
            while (true) {
                captura.read(video);
                if (!video.empty()) {
                    setSize(video.width() + 40, video.height() + 50);

                    // Detecção de face
                    Mat imagemColorida = video;
                    Mat imagemCinza = new Mat();
                    Imgproc.cvtColor(imagemColorida, imagemCinza, COLOR_BGR2GRAY);

                    CascadeClassifier classificador = new CascadeClassifier("src/cascades/haarcascade_frontalface_default.xml");
                    MatOfRect facesDetectadas = new MatOfRect();

                    classificador.detectMultiScale(imagemCinza, facesDetectadas,
                            1.3,
                            5,
                            0,
                            new Size(30, 30),
                            new Size(200, 200));

                    for (Rect rect : facesDetectadas.toArray()) {
                        Imgproc.rectangle(video, new Point(rect.x, rect.y),
                                new Point(rect.x + rect.width, rect.y + rect.height), new Scalar(0, 0, 255), 2);
                    }
                    // Fim da Detecção da face
                    BufferedImage imagem = new Utilitarios().convertMatToImage(video);

                    //g.drawString(rect.x, WIDTH, WIDTH);
                    g.drawImage(imagem, 0, 0, imagem.getWidth(), imagem.getHeight(), null);
                    
                    for (Rect rect : facesDetectadas.toArray()) {
                        g.setFont(new Font("Arial", Font.BOLD, 26));
                        g.setColor(Color.yellow);
                        g.drawString("Face", rect.x, rect.y);
                    }
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel painel;
    // End of variables declaration//GEN-END:variables

    /*
        classificador.detectMultiScale(imagemCinza, facesDetectadas,
                            1.3,
                            5,
                            0,
                            new Size(30, 30),
                            new Size(200, 200));
     */
}
